name: 'GitHub Script with Post'
description: 'Runs custom JavaScript and posts the result to GitHub Summary and Pull Request'
author: 'Daniel I. Kelley'
branding:
  icon: 'code'
  color: 'blue'

inputs:
  script:
    description: 'JavaScript code to run'
    required: true
  label:
    description: 'Identifies type of comment adding (e.g. lint)'
    required: false
    default: ''
  post-target:
    description: "Where to post the results ‚Äî valid options: 'both', 'github-step-summary', 'pull-request'"
    required: false
    default: 'both'

  # --- Pass-through options to actions/github-script ---
  github-token:
    description: 'GitHub token used to create an authenticated client'
    default: ${{ github.token }}
    required: false
  debug:
    description: 'Whether to log details of requests. true/false.'
    default: ${{ runner.debug == '1' }}
  user-agent:
    description: 'Optional user-agent string'
    default: actions/github-script
  previews:
    description: 'Comma-separated list of GraphQL API previews to accept'
    required: false
  result-encoding:
    description: 'Either "string" or "json" (default "json")'
    default: json
  retries:
    description: 'Number of times to retry a request'
    default: '0'
  retry-exempt-status-codes:
    description: 'Comma-separated list of status codes NOT to retry (effective only if retries > 0)'
    default: 400,401,403,404,422
  base-url:
    description: 'Optional GitHub REST API base URL for GitHub Enterprise'
    required: false

outputs:
  result:
    description: 'The return value of the script, stringified with JSON.stringify'
    value: ${{ steps.run-script.outputs.result }}

runs:
  using: 'composite'
  steps:
  # REMINDER: the inputs.script from .github/actions/github-script-post-comment
  # is processed first then inputs.script from actions/github-script@v8
  #  
    - name: Write script to file
      shell: bash
      run: |
        # WARNING: Must use single-quoted HEREDOC (<<'EOF') to write the script
        # exactly as provided. This preserves characters like $, ${}, 
        # backticks, and multiline formatting without shell or YAML 
        # interpolation ‚Äî ensuring the JavaScript is written to the file 
        # verbatim.
        cat <<'EOF' > ext_script.js
        ${{ inputs.script }}
        EOF

    - name: Run custom JavaScript and post results
      id: run-script
      uses: actions/github-script@v8
      with:
        github-token: ${{ inputs.github-token }}
        debug: ${{ inputs.debug }}
        user-agent: ${{ inputs.user-agent }}
        previews: ${{ inputs.previews }}
        result-encoding: ${{ inputs.result-encoding }}
        retries: ${{ inputs.retries }}
        retry-exempt-status-codes: ${{ inputs.retry-exempt-status-codes }}
        base-url: ${{ inputs.base-url }}
        script: |
          const fs = require('fs');

          try {
            // Get the inputs passed to the GitHub Action
            let postTarget = "${{ inputs['post-target'] }}".toLowerCase().trim();

            // Validate postTarget
            const validOptions = ['both', 'github-step-summary', 'pull-request'];
            if (!validOptions.includes(postTarget)) {
              console.warn(`‚ö†Ô∏è Invalid post-target value '${postTarget}'. Defaulting to 'both'.`);
              postTarget = 'both';
            }

            console.info("Received Input Label:", "${{ inputs.label }}");
            console.info("Received Input post-target:", postTarget);
            console.info("Reading ext_script.js...");
            const scriptContent = fs.readFileSync('ext_script.js', 'utf8');

            // Dynamically execute the input script provided in GitHub Action
            console.info('üöÄ Executing user script...');
            // Passing github, and context to function
            const func = new Function('github', 'context', 'core', 'glob', 'io', 'exec', 'require', `
              return (async () => {
                ${scriptContent}
              })();
            `);
            const body = await func(github, context, core, glob, io, exec, require);
            console.info('‚úÖ Executed user script successfully.');

            // Store the result as an output for downstream steps
            core.setOutput('result', JSON.stringify(body));

            // Output to GITHUB_STEP_SUMMARY
            if (postTarget === 'both' || postTarget === 'github-step-summary') {
              const summaryPath = process.env.GITHUB_STEP_SUMMARY;
              if (summaryPath) {
                fs.appendFileSync(summaryPath, '\n---\n');
                fs.appendFileSync(summaryPath, body);
                console.info(`üìù Appended ${{ inputs.label }} results to GITHUB_STEP_SUMMARY`);
              } else {
                console.warn('‚ö†Ô∏è GITHUB_STEP_SUMMARY is not defined.');
              }
            }

            // Create comment on the pull request (if applicable)
            if ((postTarget === 'both' || postTarget === 'pull-request') && context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body,
              });
              console.info(`üí¨ Commented ${{ inputs.label }} results on PR`);
            }

            if (postTarget === 'pull-request' && context.eventName !== 'pull_request') {
              console.info('‚ö†Ô∏è post-target is set to pull-request, but this workflow did not run on a pull_request event.');
            }
          } catch (error) {
            console.error(`‚ùå Error processing ${{ inputs.label }} results:`, error);

            // Detect when user forgot to return a value (causing body = undefined)
            if ( error.code === 'ERR_INVALID_ARG_TYPE' && /The "data" argument must be of type string/i.test(error.message)) {
              console.error(`üí° Hint: Your script returned a non-string value (e.g., object, array, or undefined) ‚Äî or nothing at all.\n`
                          + `Please return a string, or serialize your result using JSON.stringify.\n\n`
                          + `For example:\n\n`
                          + `  // If your script builds an object called 'result':\n`
                          + `  return \`‚úÖ Passed Test Coverage Gate, results:\\n\\n\${JSON.stringify(result, null, 2)}\`;\n`);
            }

            core.setOutput('result', JSON.stringify({ error: error.message }));
          } finally {
            try {
              const finalScript = core.getInput('script', { required: true });
              fs.writeFileSync('final_script.js', finalScript, 'utf8');
              console.info('üìÑ final_script.js written successfully in finally block.');
            } catch (writeError) {
              console.error('‚ùå Failed to write final_script.js in finally block:', writeError);
            }
          }
